@page "/admin/items"
@using Domain.Entities.Connections
@using ItemParserWorker
@inject BaseService<Item> ItemService
@inject BaseService<TraderItem> TraderItemsService
@inject ItemsParser ItemsParser

<NotificationWindow @ref="_notification"/>
<div class="container p-3">
    <div class="row row-cols-auto mb-3">
        <div class="col d-flex align-items-end m-0">
            <h1 class="page-title">
                Предметы
            </h1>
        </div>
        <div class="col d-flex align-items-end m-0">
            <button class="btn btn-sm btn-primary" @onclick="CreateNewButtonClicked">
                Добавить новый
            </button>
        </div>
        <div class="col d-flex align-items-end m-0">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ImportFromDndSuButtonClicked">
                Импортировать все предметы с dnd.su (900+ предметов) (несколько минут!)
            </button>
        </div>
        <div class="col d-flex align-items-end m-0">
            <button class="btn btn-sm btn-outline-danger" @onclick="DeleteAllItemsButtonClicked">
                Удалить все предметы
            </button>
        </div>
    </div>
    <div class="row row-cols-auto mb-1">
        <h5>Фильтры</h5>
    </div>
    <div class="row row-cols-auto mb-3">
        <div class="col">
            <label for="search-input" class="form-label">Поиск</label>
            <input type="text" class="form-control" id="search-input" placeholder="Поиск..." @onchange="SearchInputChange">
        </div>
        <div class="col">
            <DropDown Items="_rarities" AddEmptyVariant="true" Title="Редкость" SelectionChangedAction="RarityFilterChanged" 
                      CustomToStringFormat="r => r.Value.ToRus()" />
        </div>
        <div class="col">
            <DropDown Items="_types" AddEmptyVariant="true" Title="Тип" SelectionChangedAction="ItemTypeFilterChanged" 
                      CustomToStringFormat="t => t.Value.ToRus()" />
        </div>
    </div>
    <div class="row row-cols-1 g-3">
        @foreach (var item in _items)
        {
            <div class="col">
                <div class="card">
                    <div class="row g-0">
                        @if (item.ImagePath != null)
                        {
                            <div class="col-md-2 d-flex align-items-center" style="padding-left: 16px; padding-bottom: 16px; padding-top: 16px">
                                <img src="@WebUtils.GetFullImageUrl(NavigationManager, item.ImagePath)" class="img-fluid rounded" alt="Изображение предмета">
                            </div>
                        }
                        <div class="col">
                            <div class="card-body">
                                @if (_editingItem == item)
                                {
                                    <div class="mb-3">
                                        <label for="title-input" class="form-label">Название предмета</label>
                                        <input type="text" class="form-control" id="title-input" placeholder="Зелье лечения" @bind="item.Title">
                                    </div>
                                    <div class="mb-3">
                                        <label for="price-input" class="form-label">Стандартная цена</label>
                                        <input type="number" class="form-control" id="price-input" placeholder="100" @bind="item.DefaultPrice">
                                    </div>
                                    <div class="mb-3">
                                        <DropDown Items="_rarities" Title="Редкость" InitialSelectedItem="item.Rarity" 
                                                  SelectionChangedAction="(r) => DdItemRarityChanged(item, r)"
                                                  CustomToStringFormat="t => t.Value.ToRus()"/>
                                    </div>
                                    <div class="mb-3">
                                        <DropDown Items="_types" Title="Тип" InitialSelectedItem="item.Type" 
                                                  SelectionChangedAction="(t) => DdItemTypeChanged(item, t)"
                                                  CustomToStringFormat="t => t.Value.ToRus()"/>
                                    </div>
                                    <div class="mb-3">
                                        <label for="desc-input" class="form-label">Описание</label>
                                        <textarea class="form-control" id="desc-input" rows="3" @bind="item.Description"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="hid-desc-input" class="form-label">Заметки</label>
                                        <textarea class="form-control" id="hid-desc-input" rows="3" @bind="item.HiddenDescription"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="formFile" class="form-label">Изменить изображение</label>
                                        <InputFile class="form-control" id="formFile" 
                                                   OnChange="(obj) => ImageUploaderChanged(item, obj)"/>
                                    </div>
                                    <div class="row row-cols-auto d-flex justify-content-between g-2">
                                        <div class="col">
                                            <button class="btn btn-success" style="width: fit-content" @onclick="() => SaveItemButtonClicked(item)">
                                                Сохранить
                                            </button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-outline-secondary" style="width: fit-content" @onclick="CancelEditButtonClicked">
                                                Отмена
                                            </button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <h5 class="card-title">@item.Title</h5>
                                    <p class="card-text"><b>Стандартная цена: </b>@item.DefaultPrice</p>
                                    
                                    <h6 class="card-subtitle mb-3 fw-bold">
                                        Редкость: <span style="background: @item.Rarity.GetCssColor(); padding: 2px 5px; border-radius: 5px">@item.Rarity.ToRus()</span>, Тип: @item.Type.ToRus()
                                    </h6>
                                    
                                    <div class="accordion mb-3" id="accordionExample">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(item.Id)" aria-expanded="false" aria-controls="collapse@(item.Id)">
                                                    Описание
                                                </button>
                                            </h2>
                                            <div id="collapse@(item.Id)" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    @((MarkupString)item.Description.Replace("\n", "<br>"))
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo@(item.Id)" aria-expanded="false" aria-controls="collapseTwo@(item.Id)">
                                                    Заметки
                                                </button>
                                            </h2>
                                            <div id="collapseTwo@(item.Id)" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                                <div class="accordion-body">
                                                    @((MarkupString)item.HiddenDescription.Replace("\n", "<br>"))
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row row-cols-auto d-flex justify-content-between g-2">
                                        <div class="col">
                                            <button class="btn btn-primary" style="width: fit-content" @onclick="() => EditButtonClicked(item)">
                                                Редактировать
                                            </button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-outline-danger" style="width: fit-content" @onclick="() => DeleteItemButtonClicked(item)">
                                                Удалить
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ItemType?> _types = [];
    private List<ItemRarity?> _rarities = [];
    
    private ItemRarity? _filterRarity;
    private ItemType? _filterType;
    private string _searchInput = "";

    private List<Item> _items = [];
    private NotificationWindow _notification;

    private Item? _editingItem;
    private Item? _oldItemInfo;

    protected override async Task OnInitializedAsync()
    {
        _types = Enum.GetValues(typeof(ItemType)).Cast<ItemType?>().ToList();
        _rarities = Enum.GetValues(typeof(ItemRarity)).Cast<ItemRarity?>().ToList();
        await LoadItems();
    }

    private async Task LoadItems()
    {
        var dataQuery = new DataQueryParams<Item> { Filters = []};
        if (!string.IsNullOrWhiteSpace(_searchInput))
        {
            dataQuery.Expression = item => item.Title.Contains(_searchInput);
        }
        if (_filterRarity != null)
        {
            dataQuery.Filters.Add(item => item.Rarity == _filterRarity);
        }
        if (_filterType != null)
        {
            dataQuery.Filters.Add(item => item.Type == _filterType);
        }
        var res = await ItemService.GetAsync(dataQuery);
        _items = res.ToList();
        StateHasChanged();
    }
    
    private async Task CreateNewButtonClicked()
    {
        var item = new Item
        {
            Id = Guid.NewGuid(),
            Title = "Новый предмет",
            Description = "Описание",
            ImagePath = null,
            DefaultPrice = 0,
            Rarity = ItemRarity.None,
            Type = ItemType.Other,
            HiddenDescription = "Скрытое описание"
        };
        await ItemService.SaveAsync(item);
        _items.Add(item);
        _notification.Show("Успешно", "Новый предмет был успешно создан.");
    }

    private async Task SearchInputChange(ChangeEventArgs obj)
    {
        _searchInput = obj.Value == null ? "" : (string)obj.Value;
        await LoadItems();
    }

    private void RarityFilterChanged(ItemRarity? obj)
    {
        _filterRarity = obj;
        LoadItems();
    }

    private void ItemTypeFilterChanged(ItemType? obj)
    {
        _filterType = obj;
        LoadItems();
    }

    private async Task DeleteItemButtonClicked(Item item)
    {
        await ItemService.TryRemoveAsync(item.Id);
        _items.Remove(item);
        _notification.Show("Успешно", $"Предмет \"{item.Title}\" был удален.");
    }
    
    private async Task SaveItemButtonClicked(Item item)
    {
        await ItemService.SaveAsync(item);
        _notification.Show("Успешно", $"Предмет \"{item.Title}\" сохранен.");
        _editingItem = null;
        await LoadItems();
    }
    
    private async Task EditButtonClicked(Item item)
    {
        if (_editingItem != null)
        {
            CancelEditButtonClicked();
        }
        _editingItem = item;
        _oldItemInfo = new Item
        {
            Id = item.Id,
            Title = item.Title,
            ImagePath = item.ImagePath,
            Description = item.Description,
            DefaultPrice = item.DefaultPrice,
            Rarity = item.Rarity,
            Type = item.Type,
            HiddenDescription = item.HiddenDescription
        };
    }

    private async Task ImageUploaderChanged(Item item, InputFileChangeEventArgs obj)
    {
        if (obj.File.ContentType.Split('/')[0] != "image")
        {
            _notification.Show("Ошибка", "Загруженный файл не является изображением.");
            return;
        }
        var wwwrootPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
        if (!string.IsNullOrWhiteSpace(item.ImagePath))
        {
            var currentPath = Path.Combine(wwwrootPath, item.ImagePath);
            if (File.Exists(currentPath))
            {
                File.Delete(currentPath);
            }
        }
        var file = obj.File;
        var extension = obj.File.ContentType.Split('/')[1];
        var newImagePath = Path.Combine("images", "items", $"{item.Id}.{extension}");
        var fullPath = Path.Combine(wwwrootPath, newImagePath);

        await using (FileStream fs = new(fullPath, FileMode.Create))
        {
            await file.OpenReadStream(maxAllowedSize: 512000000).CopyToAsync(fs);
        }

        item.ImagePath = newImagePath;
        await ItemService.SaveAsync(item);
        _notification.Show("Успешно", $"Изображение у предмета {item.Title} успешно обновлено.");
        StateHasChanged();
    }
    
    private void DdItemRarityChanged(Item item, ItemRarity? obj)
    {
        var rarity = (ItemRarity)obj!;
        if (_editingItem != null)
        {
            _editingItem.Rarity = rarity;
        }
    }
    
    private void DdItemTypeChanged(Item item, ItemType? obj)
    {
        var type = (ItemType)obj!;
        if (_editingItem != null)
        {
            _editingItem.Type = type;
        }
    }
    
    private void CancelEditButtonClicked()
    {
        if (_editingItem == null || _oldItemInfo == null)
        {
            return;
        }
        _editingItem.Description = _oldItemInfo.Description;
        _editingItem.DefaultPrice = _oldItemInfo.DefaultPrice;
        _editingItem.HiddenDescription = _oldItemInfo.HiddenDescription;
        _editingItem.ImagePath = _oldItemInfo.ImagePath;
        _editingItem.Title = _oldItemInfo.Title;
        _editingItem.Rarity = _oldItemInfo.Rarity;
        _editingItem.Type = _oldItemInfo.Type;
        _editingItem = null;
    }

    private async Task DeleteAllItemsButtonClicked()
    {
        var allItems = await ItemService.GetAsync(new DataQueryParams<Item>());
        foreach (var item in allItems)
        {
            var traderItems = await TraderItemsService.GetAsync(new DataQueryParams<TraderItem>
            {
                Expression = ti => ti.ItemId == item.Id
            });
            await TraderItemsService.RemoveRangeAsync(traderItems);
        }
        await ItemService.RemoveRangeAsync(allItems);
        _notification.Show("Успешно", "Все предметы были удалены, обновите страницу");
    }

    private async Task ImportFromDndSuButtonClicked()
    {
        _notification.Show("Информация", "Запущен импорт всех предметов с dnd.su, ожидайте их постепенного появления на странице...");
        Task.Run(ImportAllItems);
    }

    private async Task ImportAllItems()
    {
        ItemsParser.OnItemAddedAction = item => _notification.Show("Успешно", $"Добавлен предмет \"{item.Title}\".");
        await ItemsParser.LoadItemsFromDndSuAsync(ItemService, Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "All_dnd_items.json"));
    }
}
@page "/admin/categories"
@inject BaseService<Category> CategoryService
@inject BaseService<Player> PlayerService
@inject BaseService<Trader> TraderService

<NotificationWindow @ref="_notification"/>
<div class="container p-3">
    <div class="row row-cols-auto mb-3">
        <div class="col d-flex align-items-end m-0">
            <h1 class="page-title">
                Категории
            </h1>
        </div>
        <div class="col d-flex align-items-end m-0">
            <button class="btn btn-sm btn-primary" @onclick="CreateNewButtonClicked">
                Добавить новую
            </button>
        </div>
    </div>
    
    <div class="row row-cols-3 g-4">
        @foreach (var category in _categories)
        {
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        @category.Title
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="name-input" class="form-label">Название категории</label>
                            <input type="text" class="form-control" id="name-input" placeholder="Игра1" @bind="category.Title">
                        </div>
                        <button class="btn btn-success" @onclick="() => SaveButtonClicked(category)">Сохранить</button>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteButtonClicked(category)">Удалить</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    private List<Category> _categories = [];
    private NotificationWindow _notification;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await CategoryService.GetAsync(new DataQueryParams<Category>())).ToList();
    }

    private async Task CreateNewButtonClicked()
    {
        var category = new Category
        {
            Id = Guid.NewGuid(),
            Title = "Новая категория"
        };
        await CategoryService.SaveAsync(category);
        _categories.Add(category);
        _notification.Show("Успешно", "Новая категория создана.");
    }

    private async Task SaveButtonClicked(Category category)
    {
        await CategoryService.SaveAsync(category);
        _notification.Show("Успешно", "Категория сохранена.");
    }

    private async Task DeleteButtonClicked(Category category)
    {
        var players = await PlayerService.GetAsync(new DataQueryParams<Player>
        {
            Expression = p => p.CategoryId == category.Id,
        });
        foreach (var player in players)
        {
            player.CategoryId = null;
            await PlayerService.SaveAsync(player);
        }
        var traders = await TraderService.GetAsync(new DataQueryParams<Trader>
        {
            Expression = p => p.CategoryId == category.Id,
        });
        foreach (var trader in traders)
        {
            trader.CategoryId = null;
            await TraderService.SaveAsync(trader);
        }

        var res = await CategoryService.TryRemoveAsync(category.Id);
        if (res)
        {
            _categories.Remove(category);
            _notification.Show("Успешно", $"Категория \"{category.Title}\" удалена.");
        }
    }

}
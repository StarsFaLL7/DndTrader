@if (_initialized)
{
    <div class="notification-container">
        @foreach(var notif in _notifications.Values)
        {
            <div id="notification" class="notification">
                <div class="notif-header">
                    <div class="p-0 d-flex align-items-end">
                        <p class="notification-text m-0">@notif.Title</p>
                    </div>
                    <div class="p-0">
                        <button class="close-btn" @onclick="() => Close(notif.Id)">×</button>
                    </div>
                </div>
                <div class="notif-divider"></div>
                <div class="notif-body">
                    <p class="notif-text">@notif.Description</p>
                </div>
            </div>
        }
    </div>
}


@code {
    private bool _initialized;
    private Dictionary<Guid, NotifInfo> _notifications = [];

    public void Close(Guid id)
    {
        CloseAsync(id);
    }

    public Guid Show(string title, string text)
    {
        _initialized = true;
        var id = Guid.NewGuid();
        _notifications[id] = new NotifInfo
        {
            Id = id,
            Title = title,
            Description = text,
            Timestamp = DateTimeOffset.Now.ToUnixTimeSeconds()
        };
        ResortNotifications();
        CloseAsync(id, 3000);
        
        StateHasChanged();
        return id;
    }

    private void ResortNotifications()
    {
        _notifications = _notifications.OrderBy(n => n.Value.Timestamp).ToDictionary(kv => kv.Key, kv => kv.Value);
    }

    private async Task CloseAsync(Guid id, int delay = 0)
    {
        await Task.Delay(delay);
        if (_notifications.ContainsKey(id))
        {
            _notifications.Remove(id);
            ResortNotifications();
            StateHasChanged();
        }
    }
    
    private class NotifInfo
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public long Timestamp;
    }
}
// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20250115132538_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Connections.TraderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("CustomPrice")
                        .HasColumnType("integer")
                        .HasColumnName("custom_price");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("TraderId")
                        .HasColumnType("uuid")
                        .HasColumnName("trader_id");

                    b.Property<bool>("UseDefaultPrice")
                        .HasColumnType("boolean")
                        .HasColumnName("use_default_price");

                    b.HasKey("Id")
                        .HasName("pk_trader_items");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_trader_items_discount_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_trader_items_item_id");

                    b.HasIndex("TraderId")
                        .HasDatabaseName("ix_trader_items_trader_id");

                    b.ToTable("trader_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DiscountFix")
                        .HasColumnType("integer")
                        .HasColumnName("discount_fix");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percent");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DefaultPrice")
                        .HasColumnType("integer")
                        .HasColumnName("default_price");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HiddenDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hidden_description");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Balance")
                        .HasColumnType("integer")
                        .HasColumnName("balance");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_players_category_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Trader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("HiddenDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hidden_description");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_traders");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_traders_category_id");

                    b.ToTable("traders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Connections.TraderItem", b =>
                {
                    b.HasOne("Domain.Entities.Discount", "AppliedDiscount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("fk_trader_items_discounts_discount_id");

                    b.HasOne("Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trader_items_items_item_id");

                    b.HasOne("Domain.Entities.Trader", "Trader")
                        .WithMany()
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trader_items_traders_trader_id");

                    b.Navigation("AppliedDiscount");

                    b.Navigation("Item");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("Domain.Entities.Player", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_players_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Trader", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_traders_categories_category_id");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
